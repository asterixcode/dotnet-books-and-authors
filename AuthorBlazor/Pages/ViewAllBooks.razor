@page "/ViewAllBooks"

@using AuthorBlazor.Models
@using AuthorBlazor.Services

@inject NavigationManager _navigationManager
@inject AuthorService _authorService


@if (allAuthors == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <p>
        Filter by Author First Name:
        <input type="text" @oninput="@(arg => FilterByAuthorFirstName(arg))" style="width:120px"/>
    </p>
    
    <p>
        Filter by Book Title:
        <input type="text" @oninput="@(arg => FilterByBookTitle(arg))" style="width:120px"/>
    </p>
    
    <h3>List of All Books</h3>
    
    
    
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Publication Year</th>
            <th>Number Of Pages</th>
            <th>Author First Name</th>
            <th>Author Last Name</th>
            <th>Delete Book</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var author in authorsToShow)
        {
            @foreach (var book in author.Books)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.PublicationYear</td>
                    <td>@book.NumOfPages</td>
                    <td>@author.FirstName</td>
                    <td>@author.LastName</td>
                    <td>
                        <button @onclick="@(() => DeleteBookAsync(book.Isbn))">
                            <i class="oi oi-trash" style="color:red"/>
                        </button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
}
 

@code {
    private IList<Author> allAuthors = new List<Author>();
    private IList<Author> authorsToShow = new List<Author>();
    
    private string filterByAuthorFirstName = "";
    private string filterByBookTitle = "";
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPage();
    }
    
    private async Task FilterByAuthorFirstName(ChangeEventArgs changeEventArgs)
    {
        filterByAuthorFirstName = "";
        try
        {
            filterByAuthorFirstName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
        await ExecuteFilter();
    }
    
    private async Task FilterByBookTitle(ChangeEventArgs changeEventArgs)
    {
        filterByBookTitle = "";
        try
        {
            filterByBookTitle = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        await ExecuteFilter();
    }

    private async Task ExecuteFilter()
    {
        allAuthors = await _authorService.GetAllAuthorsAsync();
        authorsToShow = allAuthors.Where(a => filterByAuthorFirstName != null && a.FirstName.Contains(filterByAuthorFirstName) || filterByAuthorFirstName == null).ToList();

        if (filterByBookTitle != null && !filterByBookTitle.Equals(""))
        {
            foreach (var author in authorsToShow)
            {
                foreach (var book in author.Books.ToList())
                {
                    if (!book.Title.Contains(filterByBookTitle))
                    {
                        author.Books.Remove(book);
                    }
                }
            }
        }
    }
    
        
    private async Task DeleteBookAsync(int id)
    {
        await _authorService.DeleteBookAsync(id);
        await LoadPage();
    }

    private async Task LoadPage()
    {
        allAuthors = await _authorService.GetAllAuthorsAsync();
        authorsToShow = await _authorService.GetAllAuthorsAsync();
    }
    
    // private void ExecuteFilter()
    // {
    //     authorsToShow = allAuthors
    //         .Where(a =>
    //             ((!filterByAuthorFirstName.Equals("") && a.FirstName.Contains(filterByAuthorFirstName)) || filterByAuthorFirstName.Equals("")) &&
    //             ((!filterByBookTitle.Equals("") && a.Books.Where(b => b.Title.Contains(filterByBookTitle)).ToList().Any()) || filterByBookTitle.Equals("")))
    //         .ToList();
    // }
    
    
    // private async Task ExecuteFilter()
    // {
    //     authorsToShow = allAuthors
    //         .Where(a =>
    //             (!filterByAuthorFirstName.Equals("") && a.FirstName.Contains(filterByAuthorFirstName) || filterByAuthorFirstName.Equals("")))
    //         .ToList();
    // }
    
    
    // private async Task ExecuteBookTitleFilter()
    // {
    //     if (!filterByBookTitle.Equals(""))
    //     {
    //         foreach (var author in allAuthors)
    //         {
    //             var filteredAuthor = new Author();
    //             var filteredBooks = new List<Book>();
    //             
    //             foreach (var book in author.Books)
    //             {
    //                 if (book.Title.Contains(filterByBookTitle))
    //                 {
    //                     if (!filteredBooks.Contains(book))
    //                     filteredBooks.Add(book);
    //                 }
    //             }
    //             filteredAuthor.Books = filteredBooks;
    //             filteredAuthors?.Add(author);
    //         }
    //
    //         filteredAuthors = authorsToShow;
    //     }
    //     else
    //     {
    //         authorsToShow = allAuthors;
    //         await ExecuteFilter();
    //     }
    //     
    // }

    
}